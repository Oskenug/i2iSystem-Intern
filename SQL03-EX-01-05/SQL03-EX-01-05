Exercise SQL03-EX-01

SELECT  * FROM HR.EMPLOYEES;

ALTER TABLE HR.EMPLOYEES
ADD COLUMN MAX_SALARY;

SELECT 
    SALARY, EMPLOYEE_ID, MAX_SALARY, FIRST_NAME  
FROM 
    HR.EMPLOYEES 
ORDER BY 
    MAX_SALARY DESC;

UPDATE 
    HR.EMPLOYEES 
SET 
    MAX_SALARY=SALARY;

DELETE 
    HR.EMPLOYEES 
WHERE 
    MAX_SALARY = (
        SELECT 
            MAX_SALARY 
        FROM (
        SELECT 
            MAX_SALARY 
        FROM 
            HR.EMPLOYEES 
        ORDER BY 
            MAX_SALARY 
            ASC) 
            WHERE ROWNUM = 1);

------------------------------------
Exercise SQL03-EX-02

SELECT * FROM HR.DEPARTMENTS;

ALTER TABLE HR.DEPARTMENTS
ADD DPR_NAME_IDX NUMBER ;

UPDATE 
    HR.DEPARTMENTS 
SET 
    DPR_NAME_IDX=DEPARTMENT_ID;


SELECT * FROM HR.EMPLOYEES
WHERE SALARY BETWEEN 1000 AND 100000;


ALTER TABLE HR.EMPLOYEES ADD CONSTRAINT 
  CNSTR_SALARY  CHECK (SALARY BETWEEN 1000 AND 100000);

-------------------------------------------
Exercise SQL03-EX-03

CREATE TABLE EMPLOYEES (
DEPARTMENT_ID NUMBER,
DEPARTMENT_NAME VARCHAR2(50)
);

SELECT * FROM HR.DEPARTMENTS;
SELECT * FROM EMPLOYEES;
 
INSERT INTO EMPLOYEES(DEPARTMENT_ID,DEPARTMENT_NAME)
VALUES (1,'Administration');
INSERT INTO EMPLOYEES(DEPARTMENT_ID,DEPARTMENT_NAME)
VALUES(2,'Marketing');
INSERT INTO EMPLOYEES(DEPARTMENT_ID,DEPARTMENT_NAME)
VALUES(3,'Purchasing');

MERGE INTO EMPLOYEES x
    USING HR.DEPARTMENTS y
ON (x.DEPARTMENT_NAME = y.DEPARTMENT_NAME)
WHEN MATCHED THEN
    UPDATE SET x.DEPARTMENT_ID = y.DEPARTMENT_ID
WHEN NOT MATCHED THEN
	INSERT (DEPARTMENT_ID,DEPARTMENT_NAME)
	VALUES (Y.DEPARTMENT_ID,y.DEPARTMENT_NAME);

------------------------------------------
Exercise SQL03-EX-04

SELECT * FROM HR.EMPLOYEES;
SELECT * FROM HR.DEPARTMENTS;

SELECT FIRST_NAME, JOB_ID, DEPARTMENT_ID FROM HR.EMPLOYEES WHERE JOB_ID LIKE 'S%';

WITH EMP_DEP AS ( SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM HR.DEPARTMENTS)
SELECT FIRST_NAME, JOB_ID, DEPARTMENT_ID FROM HR.EMPLOYEES WHERE JOB_ID LIKE 'S%';

-------------------------------------------
Exercise SQL03-EX-05

COMMIT komutu ile çalıştırılan tüm SQL komutlarının başarılı olması halinde işlemler veri tabanına yansıtılır. ROLLBACK komutu ise herhangi bir hata oluşumunda tüm işlemleri geri alır. 

